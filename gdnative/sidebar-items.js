initSidebarItems({"attr":[["methods","Collects method signatures of all functions in a `NativeClass` that have the `#[export]` attribute and registers them with Godot."],["profiled","Makes a function profiled in Godot’s built-in profiler. This macro automatically creates a tag using the name of the current module and the function by default."]],"derive":[["FromVarargs","Enable struct types to be parsed as argument lists."],["FromVariant",""],["NativeClass","Makes it possible to use a type as a NativeScript."],["OwnedToVariant",""],["ToVariant",""]],"macro":[["godot_dbg","Prints and returns the value of a given expression for quick and dirty debugging, using the engine’s logging system (visible in the editor)."],["godot_error","Print an error using the engine’s logging system (visible in the editor)."],["godot_gdnative_init","Declare the API endpoint to initialize the gdnative API on startup."],["godot_gdnative_terminate","Declare the API endpoint invoked during shutdown."],["godot_init","Declare all the API endpoints necessary to initialize a NativeScript library."],["godot_nativescript_init","Declare the API endpoint to initialize nativescript classes on startup."],["godot_print","Print a message using the engine’s logging system (visible in the editor)."],["godot_warn","Print a warning using the engine’s logging system (visible in the editor)."],["godot_wrap_method","Convenience macro to wrap an object’s method into a function pointer that can be passed to the engine when registering a class."]],"mod":[["api","Bindings for the Godot Class API."],["core_types","Types that represent core-datatypes of Godot."],["nativescript","Types and functions related to the NativeScript extension of GDNative."],["object",""],["prelude","Curated re-exports of common items."],["ref_kind","Marker types to express the memory management method of Godot types."],["thread_access","Typestates to express thread safety of Godot types."]],"struct":[["Null","Represents an explicit null reference in method arguments. This works around type inference issues with `Option`. You may create `Null`s with `Null::null` or `GodotObject::null`."],["Ref","A polymorphic smart pointer for Godot objects whose behavior changes depending on the memory management method of the underlying type and the thread access status."],["TRef","A temporary safe pointer to Godot objects that tracks thread access status. `TRef` can be coerced into bare references with `Deref`."]],"trait":[["GodotObject","Trait for Godot API objects. This trait is sealed, and implemented for generated wrapper types."],["NewRef","A trait for incrementing the reference count to a Godot object."]],"type":[["GodotResult",""]]});